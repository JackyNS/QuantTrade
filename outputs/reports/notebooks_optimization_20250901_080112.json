{
  "timestamp": "2025-09-01T08:01:12.887885",
  "current_structure": {
    "fixes": [
      {
        "file": "fixes/诊断和修复scripts_new模块.ipynb",
        "size_kb": 132.01,
        "age_days": 0
      }
    ],
    "development": [
      {
        "file": "development/TA-lib.ipynb",
        "size_kb": 42.62,
        "age_days": 7
      },
      {
        "file": "development/test_backtest.ipynb",
        "size_kb": 564.54,
        "age_days": 1
      },
      {
        "file": "development/tset_utils.ipynb",
        "size_kb": 42.87,
        "age_days": 1
      },
      {
        "file": "development/test_visualization_module.ipynb",
        "size_kb": 348.1,
        "age_days": 1
      },
      {
        "file": "development/策略模块修复测试.ipynb",
        "size_kb": 108.36,
        "age_days": 3
      }
    ],
    "testing": [
      {
        "file": "testing/scripts_validation.ipynb",
        "size_kb": 28.32,
        "age_days": 0
      }
    ]
  },
  "new_structure": {
    "research/": {
      "description": "研究和实验性notebook",
      "purpose": "策略研究、市场分析、新想法验证",
      "naming_convention": "YYYY-MM-DD_研究主题.ipynb",
      "template": "research_template.ipynb"
    },
    "tutorials/": {
      "description": "教程和使用指南",
      "purpose": "功能演示、安装指南、使用示例",
      "naming_convention": "功能模块_tutorial.ipynb",
      "template": "tutorial_template.ipynb"
    },
    "analysis/": {
      "description": "数据分析和报告",
      "purpose": "定期分析、业绩报告、市场洞察",
      "naming_convention": "YYYY-MM_分析主题.ipynb",
      "template": "analysis_template.ipynb"
    },
    "development/": {
      "description": "开发和测试notebook",
      "purpose": "功能测试、调试、原型开发",
      "naming_convention": "test_模块名.ipynb",
      "template": "development_template.ipynb"
    },
    "examples/": {
      "description": "完整示例和案例",
      "purpose": "端到端示例、最佳实践展示",
      "naming_convention": "example_用例名.ipynb",
      "template": "example_template.ipynb"
    },
    "archive/": {
      "description": "历史版本和废弃文件",
      "purpose": "保存重要的历史记录和已废弃的notebook",
      "naming_convention": "YYYY-MM-DD_原文件名.ipynb",
      "template": null
    }
  },
  "files_to_move": [
    {
      "from": "development/TA-lib.ipynb",
      "to": "tutorials/talib_installation_guide.ipynb",
      "reason": "转换为教程文档"
    },
    {
      "from": "development/test_backtest.ipynb",
      "to": "development/test_backtest_engine.ipynb",
      "reason": "归类为开发测试"
    },
    {
      "from": "development/tset_utils.ipynb",
      "to": "development/test_utils_module.ipynb",
      "reason": "归类为开发测试"
    },
    {
      "from": "development/test_visualization_module.ipynb",
      "to": "development/test_visualization.ipynb",
      "reason": "归类为开发测试"
    },
    {
      "from": "development/策略模块修复测试.ipynb",
      "to": "development/test_strategy_module.ipynb",
      "reason": "归类为开发测试"
    },
    {
      "from": "testing/scripts_validation.ipynb",
      "to": "development/test_scripts_validation.ipynb",
      "reason": "归类为开发测试"
    },
    {
      "from": "fixes/诊断和修复scripts_new模块.ipynb",
      "to": "archive/2025-08-31_scripts_new_diagnosis.ipynb",
      "reason": "归档历史记录"
    }
  ],
  "files_to_enhance": [
    {
      "file": "development/test_backtest.ipynb",
      "enhancements": [
        "添加完整的测试用例说明",
        "增加测试结果的可视化",
        "完善错误处理和异常情况测试"
      ],
      "priority": "high"
    },
    {
      "file": "development/test_visualization_module.ipynb",
      "enhancements": [
        "添加不同图表类型的示例",
        "增加交互式图表演示",
        "完善图表自定义选项说明"
      ],
      "priority": "high"
    },
    {
      "file": "fixes/诊断和修复scripts_new模块.ipynb",
      "enhancements": [
        "整理为标准的问题诊断流程",
        "添加预防措施和最佳实践",
        "创建可复用的诊断模板"
      ],
      "priority": "medium"
    }
  ],
  "files_to_create": [
    {
      "file": "_templates/research_template.ipynb",
      "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"8fd1622e\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 研究标题\\n\",\n    \"**日期**: {date}  \\n\",\n    \"**研究者**: {author}  \\n\",\n    \"**标签**: #research #策略 #分析\\n\",\n    \"\\n\",\n    \"## 📋 研究目标\\n\",\n    \"- [ ] 目标1: 描述具体研究目标\\n\",\n    \"- [ ] 目标2: 预期产出和结果\\n\",\n    \"- [ ] 目标3: 应用场景和价值\\n\",\n    \"\\n\",\n    \"## 🔍 研究假设\\n\",\n    \"描述你的研究假设和理论基础...\\n\",\n    \"\\n\",\n    \"## 📊 数据需求\\n\",\n    \"- 数据来源: \\n\",\n    \"- 数据期间: \\n\",\n    \"- 数据频率: \\n\",\n    \"- 特殊要求: \"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"81cd41e6\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 导入必要的库\\n\",\n    \"import sys\\n\",\n    \"from pathlib import Path\\n\",\n    \"project_root = Path.cwd().parent\\n\",\n    \"sys.path.insert(0, str(project_root))\\n\",\n    \"\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"from datetime import datetime, timedelta\\n\",\n    \"\\n\",\n    \"# 设置图表样式\\n\",\n    \"plt.style.use('seaborn-v0_8')\\n\",\n    \"sns.set_palette(\\\"husl\\\")\\n\",\n    \"\\n\",\n    \"print(f\\\"📅 研究开始时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\\")\\n\",\n    \"print(f\\\"📁 项目根目录: {project_root}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"bc30d56d\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🔧 数据获取和预处理\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"ef99bd81\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 数据获取代码\\n\",\n    \"# TODO: 添加你的数据获取逻辑\\n\",\n    \"\\n\",\n    \"# 示例:\\n\",\n    \"# from core.data.data_manager import DataManager\\n\",\n    \"# dm = DataManager()\\n\",\n    \"# data = dm.get_stock_data(['000001'], start_date='2024-01-01')\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 数据获取完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"f53dfff4\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📈 探索性数据分析\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"97d61126\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# EDA代码\\n\",\n    \"# TODO: 添加数据探索和可视化代码\\n\",\n    \"\\n\",\n    \"print(\\\"✅ EDA完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"fa3a772c\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🧪 研究实验\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"cc3a071d\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 主要研究代码\\n\",\n    \"# TODO: 添加核心研究逻辑\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 研究实验完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"76089bd5\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📊 结果分析\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"da421554\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 结果分析和可视化\\n\",\n    \"# TODO: 添加结果分析代码\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 结果分析完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b1be36fd\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 💡 研究结论\\n\",\n    \"\\n\",\n    \"### 主要发现\\n\",\n    \"1. 发现1: 描述重要发现\\n\",\n    \"2. 发现2: 量化结果和统计显著性\\n\",\n    \"3. 发现3: 实际应用价值\\n\",\n    \"\\n\",\n    \"### 限制和改进方向\\n\",\n    \"- 限制1: 数据或方法的局限性\\n\",\n    \"- 限制2: 外部因素影响\\n\",\n    \"- 改进1: 后续研究方向\\n\",\n    \"- 改进2: 模型优化思路\\n\",\n    \"\\n\",\n    \"### 下一步行动\\n\",\n    \"- [ ] 行动项1: 具体的后续步骤\\n\",\n    \"- [ ] 行动项2: 实施计划\\n\",\n    \"- [ ] 行动项3: 验证方案\\n\",\n    \"\\n\",\n    \"---\\n\",\n    \"**研究完成时间**: {completion_date}  \\n\",\n    \"**状态**: ✅ 已完成 / 🔄 进行中 / ⏸️ 暂停\"\n   ]\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}",
      "description": "Research 模板"
    },
    {
      "file": "_templates/tutorial_template.ipynb",
      "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"1fc4bd9d\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 功能教程: {module_name}\\n\",\n    \"**版本**: v1.0  \\n\",\n    \"**更新日期**: {date}  \\n\",\n    \"**适用用户**: 初级/中级/高级\\n\",\n    \"\\n\",\n    \"## 🎯 学习目标\\n\",\n    \"完成本教程后，你将能够:\\n\",\n    \"- [ ] 目标1: 掌握基本功能使用\\n\",\n    \"- [ ] 目标2: 理解核心概念\\n\",\n    \"- [ ] 目标3: 独立完成实际操作\\n\",\n    \"\\n\",\n    \"## 📋 前置要求\\n\",\n    \"- Python 基础知识\\n\",\n    \"- 已安装必要依赖\\n\",\n    \"- 了解项目结构\\n\",\n    \"\\n\",\n    \"## ⏱️ 预计用时\\n\",\n    \"约 30-60 分钟\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"f12983dd\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 环境检查和设置\\n\",\n    \"import sys\\n\",\n    \"from pathlib import Path\\n\",\n    \"project_root = Path.cwd().parent\\n\",\n    \"sys.path.insert(0, str(project_root))\\n\",\n    \"\\n\",\n    \"print(\\\"🔍 环境检查\\\")\\n\",\n    \"print(f\\\"Python版本: {sys.version}\\\")\\n\",\n    \"print(f\\\"项目路径: {project_root}\\\")\\n\",\n    \"\\n\",\n    \"# 检查必要的包\\n\",\n    \"required_packages = ['pandas', 'numpy', 'matplotlib']\\n\",\n    \"for package in required_packages:\\n\",\n    \"    try:\\n\",\n    \"        __import__(package)\\n\",\n    \"        print(f\\\"✅ {package}: 已安装\\\")\\n\",\n    \"    except ImportError:\\n\",\n    \"        print(f\\\"❌ {package}: 未安装\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"715ba8f5\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📚 核心概念\\n\",\n    \"\\n\",\n    \"### 概念1: {concept_name}\\n\",\n    \"解释核心概念，包括:\\n\",\n    \"- 定义和作用\\n\",\n    \"- 使用场景\\n\",\n    \"- 注意事项\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"f2561c2f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 基础示例\\n\",\n    \"# TODO: 添加简单易懂的示例代码\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 基础示例运行成功\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"43a83484\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🚀 快速开始\\n\",\n    \"\\n\",\n    \"### 步骤1: 初始化\\n\",\n    \"描述初始化过程和必要参数...\\n\",\n    \"\\n\",\n    \"### 步骤2: 基本使用\\n\",\n    \"展示最常用的功能和用法...\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"8c15212f\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 快速开始代码\\n\",\n    \"# TODO: 添加快速开始的完整示例\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 快速开始完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"7b8bf71e\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🔧 高级功能\\n\",\n    \"\\n\",\n    \"### 功能1: {advanced_feature}\\n\",\n    \"详细介绍高级功能的使用方法...\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"bf97561b\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 高级功能演示\\n\",\n    \"# TODO: 添加高级功能示例\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 高级功能演示完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"046b9902\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🛠️ 常见问题\\n\",\n    \"\\n\",\n    \"### 问题1: {common_issue}\\n\",\n    \"**现象**: 描述问题现象  \\n\",\n    \"**原因**: 分析问题原因  \\n\",\n    \"**解决方案**: 提供解决步骤\\n\",\n    \"\\n\",\n    \"### 问题2: {performance_issue}\\n\",\n    \"**优化建议**: 性能优化技巧\\n\",\n    \"\\n\",\n    \"## 📚 延伸阅读\\n\",\n    \"- [相关文档链接]\\n\",\n    \"- [API参考]\\n\",\n    \"- [最佳实践指南]\\n\",\n    \"\\n\",\n    \"## 🎉 总结\\n\",\n    \"恭喜完成本教程! 你现在应该能够:\\n\",\n    \"- ✅ 熟练使用基本功能\\n\",\n    \"- ✅ 理解核心概念\\n\",\n    \"- ✅ 解决常见问题\\n\",\n    \"\\n\",\n    \"**下一步建议**: \\n\",\n    \"- 尝试实际项目应用\\n\",\n    \"- 探索更多高级功能\\n\",\n    \"- 参与社区讨论\"\n   ]\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}",
      "description": "Tutorial 模板"
    },
    {
      "file": "_templates/development_template.ipynb",
      "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"4b67546a\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 开发测试: {module_name}\\n\",\n    \"**测试类型**: 单元测试/集成测试/性能测试  \\n\",\n    \"**测试日期**: {date}  \\n\",\n    \"**开发者**: {developer}\\n\",\n    \"\\n\",\n    \"## 🎯 测试目标\\n\",\n    \"- [ ] 功能正确性验证\\n\",\n    \"- [ ] 性能基准测试\\n\",\n    \"- [ ] 边界条件测试\\n\",\n    \"- [ ] 错误处理验证\\n\",\n    \"\\n\",\n    \"## 📋 测试环境\\n\",\n    \"- Python版本: {python_version}\\n\",\n    \"- 依赖版本: {dependencies}\\n\",\n    \"- 测试数据: {test_data}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"347752ce\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 测试环境设置\\n\",\n    \"import sys\\n\",\n    \"import time\\n\",\n    \"import traceback\\n\",\n    \"from pathlib import Path\\n\",\n    \"project_root = Path.cwd().parent\\n\",\n    \"sys.path.insert(0, str(project_root))\\n\",\n    \"\\n\",\n    \"# 导入测试相关模块\\n\",\n    \"import unittest\\n\",\n    \"from datetime import datetime\\n\",\n    \"\\n\",\n    \"print(f\\\"🧪 开始测试: {datetime.now()}\\\")\\n\",\n    \"print(f\\\"🐍 Python版本: {sys.version}\\\")\\n\",\n    \"\\n\",\n    \"# 测试统计\\n\",\n    \"test_results = {\\n\",\n    \"    'passed': 0,\\n\",\n    \"    'failed': 0,\\n\",\n    \"    'errors': [],\\n\",\n    \"    'performance': {}\\n\",\n    \"}\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"c841818d\",\n   \"metadata\": {},\n   \"source\": [\n    \"## ✅ 基础功能测试\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"0c96286b\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 测试1: 基础功能\\n\",\n    \"def test_basic_functionality():\\n\",\n    \"    \\\"\\\"\\\"测试基础功能\\\"\\\"\\\"\\n\",\n    \"    try:\\n\",\n    \"        # TODO: 添加基础功能测试代码\\n\",\n    \"        \\n\",\n    \"        print(\\\"✅ 基础功能测试通过\\\")\\n\",\n    \"        test_results['passed'] += 1\\n\",\n    \"        return True\\n\",\n    \"    except Exception as e:\\n\",\n    \"        print(f\\\"❌ 基础功能测试失败: {e}\\\")\\n\",\n    \"        test_results['failed'] += 1\\n\",\n    \"        test_results['errors'].append(f\\\"基础功能: {e}\\\")\\n\",\n    \"        return False\\n\",\n    \"\\n\",\n    \"# 运行测试\\n\",\n    \"test_basic_functionality()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"3d55bc2f\",\n   \"metadata\": {},\n   \"source\": [\n    \"## ⚡ 性能测试\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"41c16559\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 性能基准测试\\n\",\n    \"def test_performance():\\n\",\n    \"    \\\"\\\"\\\"性能基准测试\\\"\\\"\\\"\\n\",\n    \"    try:\\n\",\n    \"        start_time = time.time()\\n\",\n    \"        \\n\",\n    \"        # TODO: 添加性能测试代码\\n\",\n    \"        \\n\",\n    \"        end_time = time.time()\\n\",\n    \"        execution_time = end_time - start_time\\n\",\n    \"        \\n\",\n    \"        test_results['performance']['execution_time'] = execution_time\\n\",\n    \"        print(f\\\"⚡ 执行时间: {execution_time:.4f}秒\\\")\\n\",\n    \"        \\n\",\n    \"        # 性能基准判断\\n\",\n    \"        if execution_time < 1.0:  # 1秒以内\\n\",\n    \"            print(\\\"✅ 性能测试通过\\\")\\n\",\n    \"            test_results['passed'] += 1\\n\",\n    \"            return True\\n\",\n    \"        else:\\n\",\n    \"            print(\\\"⚠️ 性能可能需要优化\\\")\\n\",\n    \"            test_results['failed'] += 1\\n\",\n    \"            return False\\n\",\n    \"            \\n\",\n    \"    except Exception as e:\\n\",\n    \"        print(f\\\"❌ 性能测试失败: {e}\\\")\\n\",\n    \"        test_results['failed'] += 1\\n\",\n    \"        test_results['errors'].append(f\\\"性能测试: {e}\\\")\\n\",\n    \"        return False\\n\",\n    \"\\n\",\n    \"# 运行性能测试\\n\",\n    \"test_performance()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"2bb2a14d\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🔍 边界条件测试\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"fa7704e6\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 边界条件和异常处理测试\\n\",\n    \"def test_edge_cases():\\n\",\n    \"    \\\"\\\"\\\"测试边界条件\\\"\\\"\\\"\\n\",\n    \"    edge_cases = [\\n\",\n    \"        # TODO: 定义边界条件测试用例\\n\",\n    \"        # ('空数据', lambda: test_empty_data()),\\n\",\n    \"        # ('异常参数', lambda: test_invalid_params()),\\n\",\n    \"    ]\\n\",\n    \"    \\n\",\n    \"    passed = 0\\n\",\n    \"    for case_name, test_func in edge_cases:\\n\",\n    \"        try:\\n\",\n    \"            test_func()\\n\",\n    \"            print(f\\\"✅ {case_name}: 通过\\\")\\n\",\n    \"            passed += 1\\n\",\n    \"        except Exception as e:\\n\",\n    \"            print(f\\\"❌ {case_name}: 失败 - {e}\\\")\\n\",\n    \"            test_results['errors'].append(f\\\"{case_name}: {e}\\\")\\n\",\n    \"    \\n\",\n    \"    test_results['passed'] += passed\\n\",\n    \"    test_results['failed'] += len(edge_cases) - passed\\n\",\n    \"    \\n\",\n    \"    return passed == len(edge_cases)\\n\",\n    \"\\n\",\n    \"# 运行边界测试\\n\",\n    \"test_edge_cases()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"a334119b\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📊 测试结果汇总\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"56d00108\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 生成测试报告\\n\",\n    \"def generate_test_report():\\n\",\n    \"    \\\"\\\"\\\"生成测试报告\\\"\\\"\\\"\\n\",\n    \"    total_tests = test_results['passed'] + test_results['failed']\\n\",\n    \"    success_rate = test_results['passed'] / total_tests if total_tests > 0 else 0\\n\",\n    \"    \\n\",\n    \"    print(\\\"📋 测试结果汇总\\\")\\n\",\n    \"    print(\\\"=\\\" * 40)\\n\",\n    \"    print(f\\\"总测试数: {total_tests}\\\")\\n\",\n    \"    print(f\\\"通过数量: {test_results['passed']}\\\")\\n\",\n    \"    print(f\\\"失败数量: {test_results['failed']}\\\")\\n\",\n    \"    print(f\\\"成功率: {success_rate:.1%}\\\")\\n\",\n    \"    \\n\",\n    \"    if test_results['performance']:\\n\",\n    \"        print(f\\\"执行时间: {test_results['performance'].get('execution_time', 'N/A')}秒\\\")\\n\",\n    \"    \\n\",\n    \"    if test_results['errors']:\\n\",\n    \"        print(\\\"\\\\n❌ 错误详情:\\\")\\n\",\n    \"        for error in test_results['errors']:\\n\",\n    \"            print(f\\\"  - {error}\\\")\\n\",\n    \"    \\n\",\n    \"    # 测试结论\\n\",\n    \"    if success_rate >= 0.8:\\n\",\n    \"        print(\\\"\\\\n🎉 测试整体通过!\\\")\\n\",\n    \"        status = \\\"PASS\\\"\\n\",\n    \"    else:\\n\",\n    \"        print(\\\"\\\\n⚠️ 测试发现问题，需要修复!\\\")\\n\",\n    \"        status = \\\"FAIL\\\"\\n\",\n    \"    \\n\",\n    \"    return {\\n\",\n    \"        'status': status,\\n\",\n    \"        'success_rate': success_rate,\\n\",\n    \"        'details': test_results\\n\",\n    \"    }\\n\",\n    \"\\n\",\n    \"# 生成报告\\n\",\n    \"report = generate_test_report()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"65870275\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📝 测试结论\\n\",\n    \"\\n\",\n    \"### 测试状态: {status}\\n\",\n    \"\\n\",\n    \"### 主要发现\\n\",\n    \"- 发现1: 功能正常性总结\\n\",\n    \"- 发现2: 性能表现评估\\n\",\n    \"- 发现3: 问题和改进建议\\n\",\n    \"\\n\",\n    \"### 后续行动\\n\",\n    \"- [ ] 修复发现的问题\\n\",\n    \"- [ ] 优化性能瓶颈\\n\",\n    \"- [ ] 增加测试覆盖率\\n\",\n    \"- [ ] 更新文档说明\\n\",\n    \"\\n\",\n    \"---\\n\",\n    \"**测试完成时间**: {completion_time}  \\n\",\n    \"**测试结果**: ✅通过 / ❌失败 / ⚠️部分通过\"\n   ]\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}",
      "description": "Development 模板"
    },
    {
      "file": "_templates/analysis_template.ipynb",
      "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"f161ae36\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 数据分析报告: {analysis_title}\\n\",\n    \"**分析期间**: {start_date} 至 {end_date}  \\n\",\n    \"**分析师**: {analyst}  \\n\",\n    \"**报告日期**: {report_date}\\n\",\n    \"\\n\",\n    \"## 📊 执行摘要\\n\",\n    \"- **核心发现**: 一句话总结最重要的发现\\n\",\n    \"- **投资建议**: 基于分析的投资建议\\n\",\n    \"- **风险评估**: 主要风险和注意事项\\n\",\n    \"\\n\",\n    \"## 🎯 分析目标\\n\",\n    \"1. 目标1: 具体的分析问题\\n\",\n    \"2. 目标2: 预期解答的问题\\n\",\n    \"3. 目标3: 决策支持需求\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"efb248e4\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 环境设置和数据准备\\n\",\n    \"import sys\\n\",\n    \"from pathlib import Path\\n\",\n    \"project_root = Path.cwd().parent\\n\",\n    \"sys.path.insert(0, str(project_root))\\n\",\n    \"\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"from datetime import datetime, timedelta\\n\",\n    \"import warnings\\n\",\n    \"warnings.filterwarnings('ignore')\\n\",\n    \"\\n\",\n    \"# 设置图表样式\\n\",\n    \"plt.style.use('seaborn-v0_8')\\n\",\n    \"plt.rcParams['font.sans-serif'] = ['SimHei']  # 支持中文\\n\",\n    \"plt.rcParams['axes.unicode_minus'] = False\\n\",\n    \"sns.set_palette(\\\"husl\\\")\\n\",\n    \"\\n\",\n    \"# 分析参数\\n\",\n    \"ANALYSIS_START = \\\"{start_date}\\\"\\n\",\n    \"ANALYSIS_END = \\\"{end_date}\\\" \\n\",\n    \"BENCHMARK = \\\"000300\\\"  # 沪深300作为基准\\n\",\n    \"\\n\",\n    \"print(f\\\"📅 分析期间: {ANALYSIS_START} - {ANALYSIS_END}\\\")\\n\",\n    \"print(f\\\"📈 基准指数: {BENCHMARK}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"1b1a32b1\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📈 数据获取和预处理\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"03be75d3\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 数据获取\\n\",\n    \"# TODO: 从数据源获取分析数据\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 数据获取完成\\\")\\n\",\n    \"# print(f\\\"数据形状: {data.shape}\\\")\\n\",\n    \"# print(f\\\"数据期间: {data.index.min()} - {data.index.max()}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"024f2d55\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📊 描述性统计\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"7ae04f4a\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 基础统计分析\\n\",\n    \"# TODO: 计算基础统计指标\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 描述性统计完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"c371a5f2\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📈 可视化分析\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"d41c7d8c\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 创建主要图表\\n\",\n    \"fig, axes = plt.subplots(2, 2, figsize=(15, 10))\\n\",\n    \"\\n\",\n    \"# TODO: 添加4个主要图表\\n\",\n    \"# 1. 价格走势图\\n\",\n    \"# 2. 收益率分布\\n\",\n    \"# 3. 风险收益散点图\\n\",\n    \"# 4. 相关性热力图\\n\",\n    \"\\n\",\n    \"plt.tight_layout()\\n\",\n    \"plt.show()\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 可视化分析完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"8cdf0621\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🔍 深度分析\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"24c2efe2\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 高级分析\\n\",\n    \"# TODO: 添加深度分析逻辑\\n\",\n    \"# - 趋势分析\\n\",\n    \"# - 波动性分析  \\n\",\n    \"# - 相关性分析\\n\",\n    \"# - 异常检测\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 深度分析完成\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"ec082ae0\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 💹 投资洞察\\n\",\n    \"\\n\",\n    \"### 主要发现\\n\",\n    \"1. **趋势分析**: 描述市场趋势和方向\\n\",\n    \"2. **风险评估**: 识别的主要风险点\\n\",\n    \"3. **机会识别**: 发现的投资机会\\n\",\n    \"\\n\",\n    \"### 量化指标\\n\",\n    \"- 年化收益率: {annual_return}%\\n\",\n    \"- 年化波动率: {annual_volatility}%\\n\",\n    \"- 夏普比率: {sharpe_ratio}\\n\",\n    \"- 最大回撤: {max_drawdown}%\\n\",\n    \"\\n\",\n    \"### 对比基准\\n\",\n    \"- 相对收益: {relative_return}%\\n\",\n    \"- 跟踪误差: {tracking_error}%\\n\",\n    \"- 信息比率: {information_ratio}\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"e7f2a018\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📋 投资建议\\n\",\n    \"\\n\",\n    \"### 短期建议 (1-3个月)\\n\",\n    \"- 建议1: 具体的短期操作建议\\n\",\n    \"- 建议2: 风险控制措施\\n\",\n    \"- 建议3: 仓位配置建议\\n\",\n    \"\\n\",\n    \"### 中期建议 (3-12个月)\\n\",\n    \"- 策略1: 中期投资策略\\n\",\n    \"- 策略2: 资产配置调整\\n\",\n    \"- 策略3: 风险管理方案\\n\",\n    \"\\n\",\n    \"### 关键风险提示\\n\",\n    \"- ⚠️ 风险1: 市场风险及应对\\n\",\n    \"- ⚠️ 风险2: 流动性风险\\n\",\n    \"- ⚠️ 风险3: 政策风险\\n\",\n    \"\\n\",\n    \"## 📊 附录\\n\",\n    \"\\n\",\n    \"### 数据来源\\n\",\n    \"- 数据提供商: {data_source}\\n\",\n    \"- 数据更新时间: {data_update}\\n\",\n    \"- 数据质量说明: {data_quality}\\n\",\n    \"\\n\",\n    \"### 分析方法\\n\",\n    \"- 统计方法: {statistical_methods}\\n\",\n    \"- 模型假设: {model_assumptions}\\n\",\n    \"- 局限性说明: {limitations}\\n\",\n    \"\\n\",\n    \"---\\n\",\n    \"**免责声明**: 本报告仅供参考，不构成投资建议。投资有风险，入市需谨慎。\"\n   ]\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}",
      "description": "Analysis 模板"
    },
    {
      "file": "_templates/example_template.ipynb",
      "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"1ab30d18\",\n   \"metadata\": {},\n   \"source\": [\n    \"# 完整示例: {example_title}\\n\",\n    \"**示例类型**: 端到端流程/最佳实践/综合应用  \\n\",\n    \"**难度等级**: ⭐⭐⭐ (1-5星)  \\n\",\n    \"**预计时间**: {duration} 分钟\\n\",\n    \"\\n\",\n    \"## 🎯 示例目标\\n\",\n    \"本示例将演示如何:\\n\",\n    \"- 目标1: 完整的工作流程\\n\",\n    \"- 目标2: 最佳实践应用\\n\",\n    \"- 目标3: 常见问题解决\\n\",\n    \"\\n\",\n    \"## 📋 业务场景\\n\",\n    \"描述真实的业务应用场景和需求...\\n\",\n    \"\\n\",\n    \"## 🛠️ 技术栈\\n\",\n    \"- **数据获取**: {data_source}\\n\",\n    \"- **数据处理**: pandas, numpy\\n\",\n    \"- **分析工具**: {analysis_tools}\\n\",\n    \"- **可视化**: matplotlib, seaborn\\n\",\n    \"- **核心模块**: {core_modules}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"00ad6460\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 完整环境设置\\n\",\n    \"import sys\\n\",\n    \"from pathlib import Path\\n\",\n    \"project_root = Path.cwd().parent\\n\",\n    \"sys.path.insert(0, str(project_root))\\n\",\n    \"\\n\",\n    \"# 导入所有必要的模块\\n\",\n    \"import pandas as pd\\n\",\n    \"import numpy as np\\n\",\n    \"import matplotlib.pyplot as plt\\n\",\n    \"import seaborn as sns\\n\",\n    \"from datetime import datetime, timedelta\\n\",\n    \"\\n\",\n    \"# 项目模块 \\n\",\n    \"# TODO: 导入项目特定模块\\n\",\n    \"# from core.data.data_manager import DataManager\\n\",\n    \"# from core.strategy.base_strategy import BaseStrategy\\n\",\n    \"\\n\",\n    \"# 全局设置\\n\",\n    \"plt.style.use('seaborn-v0_8')\\n\",\n    \"pd.set_option('display.max_columns', None)\\n\",\n    \"pd.set_option('display.width', None)\\n\",\n    \"\\n\",\n    \"print(\\\"🚀 环境设置完成\\\")\\n\",\n    \"print(f\\\"📁 项目路径: {project_root}\\\")\\n\",\n    \"print(f\\\"🐍 Python版本: {sys.version}\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"fdb98c25\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🔄 步骤1: 数据准备\\n\",\n    \"\\n\",\n    \"### 数据获取策略\\n\",\n    \"我们将获取以下数据:\\n\",\n    \"- 股票价格数据 (OHLCV)\\n\",\n    \"- 财务基本面数据\\n\",\n    \"- 市场情绪指标\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"cb152ff5\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 步骤1: 数据获取\\n\",\n    \"print(\\\"📊 开始数据获取...\\\")\\n\",\n    \"\\n\",\n    \"# TODO: 添加完整的数据获取逻辑\\n\",\n    \"# data_manager = DataManager()\\n\",\n    \"# stock_data = data_manager.get_stock_data(['000001', '000002'], '2024-01-01', '2024-12-31')\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 步骤1完成: 数据获取\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"06fde7e9\",\n   \"metadata\": {},\n   \"source\": [\n    \"## ⚙️ 步骤2: 数据处理\\n\",\n    \"\\n\",\n    \"### 数据清洗和预处理\\n\",\n    \"- 处理缺失值\\n\",\n    \"- 数据格式标准化\\n\",\n    \"- 异常值检测和处理\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"0a99d9e4\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 步骤2: 数据预处理\\n\",\n    \"print(\\\"🔧 开始数据预处理...\\\")\\n\",\n    \"\\n\",\n    \"# TODO: 添加数据预处理逻辑\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 步骤2完成: 数据预处理\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"b391e0b9\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📈 步骤3: 特征工程\\n\",\n    \"\\n\",\n    \"### 技术指标计算\\n\",\n    \"- 趋势指标 (MA, EMA, MACD)\\n\",\n    \"- 动量指标 (RSI, KDJ)\\n\",\n    \"- 波动性指标 (ATR, Bollinger Bands)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"e6f472c7\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 步骤3: 特征工程\\n\",\n    \"print(\\\"⚙️ 开始特征工程...\\\")\\n\",\n    \"\\n\",\n    \"# TODO: 添加特征工程逻辑\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 步骤3完成: 特征工程\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"618b757a\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🎯 步骤4: 策略实现\\n\",\n    \"\\n\",\n    \"### 核心策略逻辑\\n\",\n    \"实现完整的投资策略:\\n\",\n    \"1. 信号生成逻辑\\n\",\n    \"2. 风险控制机制\\n\",\n    \"3. 仓位管理规则\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"6844f843\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 步骤4: 策略实现\\n\",\n    \"print(\\\"🎯 开始策略实现...\\\")\\n\",\n    \"\\n\",\n    \"# TODO: 添加策略实现逻辑\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 步骤4完成: 策略实现\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"1168ee98\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 🔬 步骤5: 回测验证\\n\",\n    \"\\n\",\n    \"### 回测框架\\n\",\n    \"使用历史数据验证策略表现:\\n\",\n    \"- 收益率计算\\n\",\n    \"- 风险指标评估\\n\",\n    \"- 基准对比分析\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"63754d48\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 步骤5: 回测验证\\n\",\n    \"print(\\\"🔬 开始回测验证...\\\")\\n\",\n    \"\\n\",\n    \"# TODO: 添加回测逻辑\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 步骤5完成: 回测验证\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"802b05d4\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📊 步骤6: 结果分析\\n\",\n    \"\\n\",\n    \"### 综合分析报告\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"id\": \"57010d4c\",\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# 步骤6: 结果分析和可视化\\n\",\n    \"print(\\\"📊 开始结果分析...\\\")\\n\",\n    \"\\n\",\n    \"# 创建综合分析图表\\n\",\n    \"fig, axes = plt.subplots(2, 3, figsize=(20, 12))\\n\",\n    \"\\n\",\n    \"# TODO: 添加6个核心分析图表\\n\",\n    \"# 1. 累计收益曲线\\n\",\n    \"# 2. 回撤分析\\n\",\n    \"# 3. 月度收益热力图\\n\",\n    \"# 4. 风险收益散点图\\n\",\n    \"# 5. 持仓分布\\n\",\n    \"# 6. 交易统计\\n\",\n    \"\\n\",\n    \"plt.suptitle('策略综合分析报告', fontsize=16)\\n\",\n    \"plt.tight_layout()\\n\",\n    \"plt.show()\\n\",\n    \"\\n\",\n    \"print(\\\"✅ 步骤6完成: 结果分析\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"id\": \"734c77c2\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 📋 完整流程总结\\n\",\n    \"\\n\",\n    \"### 🎉 示例完成!\\n\",\n    \"我们成功完成了从数据获取到结果分析的完整流程:\\n\",\n    \"\\n\",\n    \"1. ✅ **数据准备**: 获取和预处理历史数据\\n\",\n    \"2. ✅ **特征工程**: 计算技术指标和衍生特征  \\n\",\n    \"3. ✅ **策略开发**: 实现核心投资逻辑\\n\",\n    \"4. ✅ **回测验证**: 验证策略历史表现\\n\",\n    \"5. ✅ **结果分析**: 生成综合分析报告\\n\",\n    \"\\n\",\n    \"### 📈 关键性能指标\\n\",\n    \"- **年化收益率**: {annual_return}%\\n\",\n    \"- **最大回撤**: {max_drawdown}%\\n\",\n    \"- **夏普比率**: {sharpe_ratio}\\n\",\n    \"- **胜率**: {win_rate}%\\n\",\n    \"\\n\",\n    \"### 💡 最佳实践要点\\n\",\n    \"1. **数据质量**: 始终验证数据的完整性和准确性\\n\",\n    \"2. **风险控制**: 设置合理的止损和仓位限制\\n\",\n    \"3. **参数优化**: 避免过度拟合，使用滚动窗口验证\\n\",\n    \"4. **实盘考虑**: 考虑交易成本、滑点和流动性影响\\n\",\n    \"\\n\",\n    \"### 🔗 相关资源\\n\",\n    \"- [项目文档](../docs/)\\n\",\n    \"- [API参考](../core/)\\n\",\n    \"- [更多示例](../examples/)\\n\",\n    \"\\n\",\n    \"### 🚀 下一步建议\\n\",\n    \"- [ ] 尝试不同的参数组合\\n\",\n    \"- [ ] 添加更多风险管理规则\\n\",\n    \"- [ ] 扩展到多资产策略\\n\",\n    \"- [ ] 实现实时交易接口\\n\",\n    \"\\n\",\n    \"---\\n\",\n    \"**示例完成时间**: {completion_time}  \\n\",\n    \"**代码可复现性**: ✅ 完全可复现\"\n   ]\n  }\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 5\n}",
      "description": "Example 模板"
    }
  ],
  "execution_completed": true,
  "completion_time": "2025-09-01T08:01:12.906672"
}